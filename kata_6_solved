using System;


namespace Solution
{
    public class Program
    {
        public static void Main(string[] args)
        {
            Kata kata = new Kata();
            int x = kata.MinPermutation(0);
            int x1 = kata.MinPermutation(-205);
            int x2 = kata.MinPermutation(2649849);

            Console.WriteLine($"x = {x}, x1 = {x1}, x2 = {x2}");
        }


    }
    public class Kata
    {
        public  int MinPermutation(int n)
        {
            int result = 0; //ставим значение по умолчанию
            if(n == 0) //проверяем равно ли нулю входящее число
            {
                return result;
            }
            bool numberNegative = false; //проверяем отрицательное число или нет
            if(n < 0)
            {
                n = Math.Abs(n);
                numberNegative = true;
            }
            bool WeHaveZeros = false;  //узнаём содержит ли число нули          
            int[] integersArray = CreateIntArray(n, ref WeHaveZeros);
            int[] sortedIntegesArray = SortNumbersArray(integersArray);

            if (WeHaveZeros == true) //меняется логика перестановки, нули не должны быть вначале числа
            {
                int[] zerosAtStart = MoveZerosToStart(sortedIntegesArray);
                string numbersString = ConverseArrayTostring(zerosAtStart);
                result = Int32.Parse(numbersString);               
            }
            else
            {
                string numbersString = ConverseArrayTostring(sortedIntegesArray);
                result = Int32.Parse(numbersString);                
            }

            if(numberNegative == true) //возвращаем знак если он был отрицательным
            {
                result *= -1;
            }
            return result;
        }
        public  int[] CreateIntArray(int numberToArray, ref bool HaveZeros) //Создаём массив чисел для сортировки
        {
            string strNumber = numberToArray.ToString();
            int[] numbersArray = new int[strNumber.Length];
            for (int index = 0; index < strNumber.Length; index++)
            {

                numbersArray[index] = Int32.Parse(strNumber[index].ToString());
                if (numbersArray[index] == 0)
                {
                    HaveZeros = true;
                }
            }
            return numbersArray;
        }
        public  int[] SortNumbersArray(int[] array) //сортируем массив (примитивно пузырьком)
        {
            int[] resultArray = array;
            int swapValue;
            for (int i = 0; i < resultArray.Length; i++)
            {
                for (int j = 0; j < resultArray.Length - 1 - i; j++)
                {
                    if (resultArray[j] > resultArray[j + 1])
                    {
                        swapValue = resultArray[j];
                        resultArray[j] = resultArray[j + 1];
                        resultArray[j + 1] = swapValue;

                    }
                }
            }
            return resultArray;
        }
        public  int[] MoveZerosToStart(int[] array) //если были нули, передвигаем первое ненулевое число в начало массива
        {
            int[] resultArray = new int[array.Length];
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i] == 0)
                {
                    resultArray[i + 1] = array[i];
                }
                else if (array[i] != 0 && array[i - 1] == 0)
                {
                    resultArray[0] = array[i];
                }
                else
                {
                    resultArray[i] = array[i];
                }
            }
            return resultArray;
        }

        public  string ConverseArrayTostring(int[] array) //преобразуем массив в строку
        {
            string result = string.Empty;
            for (int i = 0; i < array.Length; i++)
            {
                result += array[i];
            }
            return result;
        }
    }
        
    
}
